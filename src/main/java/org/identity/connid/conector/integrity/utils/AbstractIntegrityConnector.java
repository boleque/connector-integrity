/*
 * Copyright (c) 2010-2023 Evolveum
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.identity.connid.conector.integrity.utils;


import org.identityconnectors.common.logging.Log;
import org.identityconnectors.framework.common.exceptions.InvalidAttributeValueException;

/**
 * Class containing convenience methods and abstract methods which have to be implemented by the training connector
 * subclass. The abstract methods are not conditionally present in all types of connectors and its not mandatory to have
 * them there but are usefull as an example for the training.
 */
public abstract class AbstractIntegrityConnector {

    private static final Log LOG = Log.getLog(AbstractIntegrityConnector.class);

    /**
     * Convenience method containing non-null validation of mandatory parameters. In case of null the
     * method returns a InvalidAttributeValueException exception with a pre-defined body.
     * @param object the object which is being evaluated as null
     * @throws InvalidAttributeValueException
     */
    private <T> void validator(T object) {

        if (object == null) {
            LOG.error("Parameter of type " + object.getClass().getSimpleName() + " not provided.");
            throw new InvalidAttributeValueException("Parameter of type " + object.getClass().getSimpleName() + " not provided.");
        }
    }

    /**
     * Convenience method containing non-null validation of mandatory parameters present as a list.
     * In case of null the method returns a InvalidAttributeValueException exception with a pre-defined body.
     * @param objects the single array of objects which is being evaluated as null
     * @throws InvalidAttributeValueException
     */
    protected <T> void validate(T... objects) {

        for (T object : objects) {

            validator(object);
        }
    }

    /**
     * Centralized method to handle exceptions which occur during the communication with the remote system.
     * @param ex the exception which was caught in a try-catch block, or generated by a block of code.
     * @param message the message which should be present in the stack trace of the rethrown exception
     * e.g. "Test connection failed, reason: " + ex.getMessage()
     */
    protected abstract void handleGenericException(Exception ex, String message);

    /**
     * Method which translates a set of attributes from the IAM system to a RUser object representation
     * which can be communicated back to the remote system. e.g. as a parameter of the remote interface
     * convenience methods.
     * @param uid the unique identifier of the user object which is being translated
     * @param attributes the set of attributes usually returned from the iam system which should be used to
     * create the RUser object
     */
    //protected abstract RUser translateUser(Uid uid, Set<Attribute> attributes);

    /**
     * Method which translates a RObject to an object which can be used by the IAM system as a part of the API contract
     * , usually these objects are consumed by special ResultHandler object handle methods.
     * @param object the object returned by the remote system which should be translated.
     */
    //protected abstract ConnectorObject translate(RObject object);
}
